#!/bin/bash

# setup_production.sh
# Hovedskript for å sette opp App-server eller DB-server.
#
# Bruk:
# sudo ./setup_production.sh app
# sudo ./setup_production.sh db
#
# Kjør fra mappen der skriptet og 'configs'-undermappen ligger.

set -e # Avslutt umiddelbart hvis en kommando feiler
# set -u # Behandle udefinerte variabler som en feil
# set -o pipefail # La pipeline-feilstatus være den siste feilende kommandoen

# --- Konfigurerbare variabler ---
APP_SERVER_IP="10.12.2.60" # Endre om nødvendig
DB_SERVER_IP="10.12.2.61"   # Endre om nødvendig
DB_USER="chr" # Erstatt med ønsket MongoDB app-bruker
DB_PASS="chr" # Erstatt med et STERKT passord
DB_NAME="tusenfryd"

# Sjekk om skriptet kjøres som root/sudo
if [ "$(id -u)" -ne 0 ]; then
  echo "Dette skriptet må kjøres med sudo."
  exit 1
fi

# Sjekk om servertype-argument er gitt
if [ -z "$1" ]; then
  echo "Feil: Servertype mangler."
  echo "Bruk: sudo $0 <app|db>"
  exit 1
fi

SERVER_TYPE=$1
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# --- Felles oppsettfunksjoner ---
common_setup() {
  echo "--- Starter felles systemoppdatering og installasjon av verktøy ---"
  apt update
  apt upgrade -y
  apt install -y curl wget vim ufw gnupg
  echo "--- Felles oppsett fullført ---"
}

# --- App-server spesifikt oppsett ---
setup_app_server() {
  echo "====== Starter oppsett for App-server ($APP_SERVER_IP) ======"

  echo "--- Installerer Docker ---"
  # Fjerner gamle versjoner
  for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do apt-get remove -y $pkg > /dev/null 2>&1 || true; done
  # Sett opp Docker repository
  apt-get update
  apt-get install -y ca-certificates curl
  install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  chmod a+r /etc/apt/keyrings/docker.asc
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null
  apt-get update
  apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  echo "Docker installert. Versjon:"
  docker --version
  docker compose version

  # Legg nåværende sudo-bruker til docker-gruppen (hvis det finnes en)
  if [ -n "$SUDO_USER" ]; then
    usermod -aG docker "$SUDO_USER"
    echo "Bruker $SUDO_USER lagt til docker-gruppen. Logg ut/inn for at endringen skal tre i kraft for denne brukeren."
  fi

  echo "--- Installerer Nginx ---"
  apt install -y nginx
  systemctl enable nginx
  systemctl start nginx

  echo "--- Konfigurerer Nginx reverse proxy ---"
  NGINX_CONFIG_SOURCE="$SCRIPT_DIR/configs/app_server/nginx_minapp.conf"
  NGINX_CONFIG_DEST="/etc/nginx/sites-available/minapp"

  if [ ! -f "$NGINX_CONFIG_SOURCE" ]; then
    echo "FEIL: Nginx konfigurasjonsfil $NGINX_CONFIG_SOURCE ikke funnet!"
    exit 1
  fi
  cp "$NGINX_CONFIG_SOURCE" "$NGINX_CONFIG_DEST"
  # Erstatt plassholder for server_name med faktisk IP hvis domene ikke er satt
  sed -i "s/YOUR_DOMAIN_OR_APP_IP/$APP_SERVER_IP/g" "$NGINX_CONFIG_DEST"

  # Fjern default Nginx-side hvis den er lenket
  if [ -L /etc/nginx/sites-enabled/default ]; then
    rm /etc/nginx/sites-enabled/default
  fi
  # Aktiver vår side (hvis ikke allerede lenket)
  if [ ! -L /etc/nginx/sites-enabled/minapp ]; then
    ln -s "$NGINX_CONFIG_DEST" /etc/nginx/sites-enabled/minapp
  fi

  nginx -t # Test Nginx konfigurasjon
  systemctl reload nginx
  echo "Nginx konfigurert."

  echo "--- Konfigurerer UFW (brannmur) for App-server ---"
  ufw default deny incoming
  ufw default allow outgoing
  ufw allow ssh      # Port 22
  ufw allow http     # Port 80
  ufw allow https    # Port 443 (for fremtidig SSL)
  # Node.js appen vil lytte på 127.0.0.1:8080 (via Docker), så ingen ekstern UFW-regel trengs for den.
  ufw enable # Svar 'y' hvis du kjører dette via SSH
  echo "UFW aktivert på App-server. Status:"
  ufw status verbose

  echo "--- Viktig for App-server ---"
  echo "1. Kopier din Node.js applikasjonskode (inkludert Dockerfile) til denne serveren."
  echo "2. Opprett/tilpass en 'docker-compose.yml' i applikasjonsmappen din."
  echo "   En mal ('docker-compose.template.yml') finnes i '$SCRIPT_DIR/configs/app_server/'."
  echo "   Sørg for at MONGODB_URI i din docker-compose.yml peker til:"
  echo "   mongodb://$DB_USER:$DB_PASS@$DB_SERVER_IP:27017/$DB_NAME?authSource=admin"
  echo "3. Bygg og start appen med: docker compose up --build -d (fra app-mappen)"
  echo "4. For HTTPS, installer Certbot og konfigurer Nginx: https://certbot.eff.org/"
  echo "====== App-server oppsett fullført ======"
}

# --- DB-server spesifikt oppsett ---
setup_db_server() {
  echo "====== Starter oppsett for Database-server ($DB_SERVER_IP) ======"

  echo "--- Installerer MongoDB (versjon 6.0) ---"
  # Sjekk om MongoDB allerede er installert
  if dpkg -s mongodb-org > /dev/null 2>&1; then
    echo "MongoDB ser ut til å være allerede installert."
  else
    curl -fsSL https://pgp.mongodb.com/server-6.0.asc | \
      gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg \
      --dearmor
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list
    apt-get update
    apt-get install -y mongodb-org
    systemctl enable mongod
    systemctl start mongod
    echo "MongoDB installert og startet."
  fi
  systemctl status mongod --no-pager

  echo "--- Konfigurerer MongoDB bindIp ---"
  MONGOD_CONF="/etc/mongod.conf"
  # Sikkerhetskopier original konfigurasjonsfil
  if [ ! -f "${MONGOD_CONF}.bak" ]; then
    cp "$MONGOD_CONF" "${MONGOD_CONF}.bak"
  fi
  # Endre bindIp. Dette forutsetter standard YAML-struktur.
  # Sørger for at MongoDB lytter på localhost og den spesifikke interne IP-en.
  sed -i "s/^\s*bindIp:.*/  bindIp: 127.0.0.1,$DB_SERVER_IP/" "$MONGOD_CONF"
  # Hvis linjen ikke finnes, legg den til under 'net:' (mer robust løsning kan være nødvendig for komplekse filer)
  if ! grep -q "bindIp: 127.0.0.1,$DB_SERVER_IP" "$MONGOD_CONF"; then
      echo "Kunne ikke automatisk sette bindIp. Vennligst rediger $MONGOD_CONF manuelt:"
      echo "net:"
      echo "  port: 27017"
      echo "  bindIp: 127.0.0.1,$DB_SERVER_IP"
  fi

  echo "Restarter MongoDB for å bruke ny konfigurasjon..."
  systemctl restart mongod
  sleep 5 # Gi MongoDB tid til å starte på nytt
  systemctl status mongod --no-pager

  echo "--- Konfigurerer UFW (brannmur) for DB-server ---"
  ufw default deny incoming
  ufw default allow outgoing
  ufw allow ssh # Port 22
  # Tillat KUN trafikk til MongoDB (port 27017) fra App-serverens IP
  ufw allow from "$APP_SERVER_IP" to any port 27017 proto tcp comment 'Allow MongoDB from App Server'
  ufw enable # Svar 'y' hvis du kjører dette via SSH
  echo "UFW aktivert på DB-server. Status:"
  ufw status verbose

  echo "--- Viktig for DB-server ---"
  echo "1. MongoDB er nå konfigurert til å lytte på 127.0.0.1 og $DB_SERVER_IP."
  echo "2. UFW tillater kun tilkoblinger til MongoDB-porten (27017) fra $APP_SERVER_IP."
  echo "3. DU MÅ NÅ SIKRE MONGODB VED Å OPPRETTE EN ADMINISTRATORBRUKER OG EN APPLIKASJONSBRUKER:"
  echo "   Koble til mongo shell: mongosh"
  echo "   Deretter, i mongo shell:"
  echo "   use admin"
  echo "   db.createUser({ user: \"adminUser\", pwd: passwordPrompt(), roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, { role: \"readWriteAnyDatabase\", db: \"admin\" } ] })"
  echo "   exit"
  echo "   Koble til igjen med adminUser: mongosh -u adminUser -p --authenticationDatabase admin"
  echo "   use $DB_NAME"
  echo "   db.createUser({ user: \"$DB_USER\", pwd: passwordPrompt(), roles: [ { role: \"readWrite\", db: \"$DB_NAME\" } ] })"
  echo "   exit"
  echo "4. Sørg for at MONGODB_URI i din applikasjons docker-compose.yml bruker '$DB_USER' og passordet du nettopp satte."
  echo "====== DB-server oppsett fullført ======"
}

# --- Hovedlogikk ---
common_setup

if [ "$SERVER_TYPE" = "app" ]; then
  setup_app_server
elif [ "$SERVER_TYPE" = "db" ]; then
  setup_db_server
else
  echo "Feil: Ukjent servertype '$SERVER_TYPE'."
  echo "Bruk: sudo $0 <app|db>"
  exit 1
fi

echo "--- Skript fullført ---"